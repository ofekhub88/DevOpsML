[1mcollected 1 item                                                                                                                                                        
test_data.py::test_kolmogorov_smirnov [31mFAILED
=============================================================================== FAILURES ================================================================================
[31m[1m________________________________________________________________________ test_kolmogorov_smirnov ________________________________________________________________________
data = (       Unnamed: 0  danceability  ...                                              title                              ... NaN                            Lost Lands 2019                            Lost Lands 2019
[12593 rows x 19 columns])
    def test_kolmogorov_smirnov(data):
        sample1, sample2 = data
        numerical_columns = [
            "danceability",
            "energy",
            "loudness",
            "speechiness",
            "acousticness",
            "instrumentalness",
            "liveness",
            "valence",
            "tempo",
            "duration_ms"
        ]
        # Let's decide the Type I error probability (related to the False Positive Rate)
        alpha = 0.05
        # Bonferroni correction for multiple hypothesis testing
        # (see my blog post on this topic to see where this comes from:
        # https://towardsdatascience.com/precision-and-recall-trade-off-and-multiple-hypothesis-testing-family-wise-error-rate-vs-false-71a85057ca2b)
        alpha_prime = 1 - (1 - alpha)**(1 / len(numerical_columns))
        for col in numerical_columns:
            # Use the 2-sample KS test (scipy.stats.ks_2sample) on the column
            # col
            ts, p_value = scipy.stats.ttest_ind(
            sample1[col], sample2[col], equal_var=False, alternative="two-sided"
            )
            # Add an assertion so that the test fails if p_value > alpha_prime
>           assert p_value >= alpha_prime, "T-test rejected the null hyp. at the 2 sigma level "
[31m[1mE           AssertionError: T-test rejected the null hyp. at the 2 sigma level 
[31m[1mE           assert nan >= 0.005116196891823743
[31m[1mtest_data.py[39m[22m:56: AssertionError
[33m=========================================================================== warnings summary ============================================================================
test_data.py::test_kolmogorov_smirnov
test_data.py::test_kolmogorov_smirnov
test_data.py::test_kolmogorov_smirnov
  /home/meirof/miniconda3.10/envs/mlflow-acbfa4ee4aa9be3158264a605e4861dd8a78622b/lib/python3.9/site-packages/scipy/stats/_distn_infrastructure.py:2003: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.
  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)
    dtyp = np.find_common_type([x.dtype, np.float64], [])
test_data.py: 18 warnings
  /home/meirof/miniconda3.10/envs/mlflow-acbfa4ee4aa9be3158264a605e4861dd8a78622b/lib/python3.9/site-packages/pandas/core/internals/concat.py:408: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.
  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)
    common_dtype = np.find_common_type(upcast_classes, [])
-- Docs: https://docs.pytest.org/en/stable/warnings.html
======================================================================== short test summary info ========================================================================
FAILED test_data.py::test_kolmogorov_smirnov - AssertionError: T-test rejected the null hyp. at the 2 sigma level
[31m==================================================================== [1m1 failed[39m[22m, [33m21 warnings[31m in 7.02s =====================================================================